rev_table$expo_dollar_aua[row] = expo_aua
} else if (is.element(key, exposure_vec)){
#find index of the first match of said key
ind = which(rev_table$key==key)[1]
expo_gnam = expo_gnam - as.integer(rev_table$dir_gnam[ind])*round(rev_table$unit_gnam[ind],2)*round(rev_table$cf_gnam[ind],2)
rev_table$expo_dollar_gnam[row] = expo_gnam
expo_aua = expo_aua - as.integer(rev_table$dir_aua[ind])*round(rev_table$unit_aua[ind],2)*round(rev_table$cf_aua[ind],2)
rev_table$expo_dollar_aua[row] = expo_aua
}
}
exposure_vec <- c()
expo_gnam = 0
expo_aua = 0
for (row in 1:nrow(rev_table)){
key = rev_table$key[row]
if (is.element(key, exposure_vec)==FALSE){
exposure_vec = c(exposure_vec, key)
expo_gnam = expo_gnam + as.integer(rev_table$dir_gnam[row])*round(rev_table$unit_gnam[row],2)*round(rev_table$cf_gnam[row],2)
rev_table$expo_dollar_gnam[row] = expo_gnam
expo_aua = expo_aua + as.integer(rev_table$dir_aua[row])*round(rev_table$unit_aua[row],2)*round(rev_table$cf_aua[row],2)
rev_table$expo_dollar_aua[row] = expo_aua
} else if (is.element(key, exposure_vec)){
#find index of the first match of said key
ind = which(rev_table$key==key)[1]
expo_gnam = expo_gnam - as.integer(rev_table$dir_gnam[ind])*round(rev_table$unit_gnam[ind],2)*round(rev_table$cf_gnam[ind],2)
rev_table$expo_dollar_gnam[row] = expo_gnam
expo_aua = expo_aua - as.integer(rev_table$dir_aua[ind])*round(rev_table$unit_aua[ind],2)*round(rev_table$cf_aua[ind],2)
rev_table$expo_dollar_aua[row] = expo_aua
}
}
exposure_vec <- c()
expo_gnam = 0
expo_aua = 0
for (row in 1:nrow(rev_table)){
key = rev_table$key[row]
if (is.element(key, exposure_vec)==FALSE){
exposure_vec = c(exposure_vec, key)
expo_gnam = expo_gnam + as.integer(rev_table$dir_gnam[row])*round(rev_table$unit_gnam[row],1)*round(rev_table$cf_gnam[row],2)
rev_table$expo_dollar_gnam[row] = expo_gnam
expo_aua = expo_aua + as.integer(rev_table$dir_aua[row])*round(rev_table$unit_aua[row],1)*round(rev_table$cf_aua[row],2)
rev_table$expo_dollar_aua[row] = expo_aua
} else if (is.element(key, exposure_vec)){
#find index of the first match of said key
ind = which(rev_table$key==key)[1]
expo_gnam = expo_gnam - as.integer(rev_table$dir_gnam[ind])*round(rev_table$unit_gnam[ind],1)*round(rev_table$cf_gnam[ind],2)
rev_table$expo_dollar_gnam[row] = expo_gnam
expo_aua = expo_aua - as.integer(rev_table$dir_aua[ind])*round(rev_table$unit_aua[ind],1)*round(rev_table$cf_aua[ind],2)
rev_table$expo_dollar_aua[row] = expo_aua
}
}
exposure_vec <- c()
expo_gnam = 0
expo_aua = 0
for (row in 1:nrow(rev_table)){
key = rev_table$key[row]
if (is.element(key, exposure_vec)==FALSE){
exposure_vec = c(exposure_vec, key)
expo_gnam = expo_gnam + as.integer(rev_table$dir_gnam[row])*as.integer(rev_table$unit_gnam[row])*round(rev_table$cf_gnam[row],2)
rev_table$expo_dollar_gnam[row] = expo_gnam
expo_aua = expo_aua + as.integer(rev_table$dir_aua[row])*round(rev_table$unit_aua[row],1)*round(rev_table$cf_aua[row],2)
rev_table$expo_dollar_aua[row] = expo_aua
} else if (is.element(key, exposure_vec)){
#find index of the first match of said key
ind = which(rev_table$key==key)[1]
expo_gnam = expo_gnam - as.integer(rev_table$dir_gnam[ind])*as.integer(rev_table$unit_gnam[ind])*round(rev_table$cf_gnam[ind],2)
rev_table$expo_dollar_gnam[row] = expo_gnam
expo_aua = expo_aua - as.integer(rev_table$dir_aua[ind])*round(rev_table$unit_aua[ind],1)*round(rev_table$cf_aua[ind],2)
rev_table$expo_dollar_aua[row] = expo_aua
}
}
exposure_vec <- c()
expo_gnam = 0
expo_aua = 0
for (row in 1:nrow(rev_table)){
key = rev_table$key[row]
if (is.element(key, exposure_vec)==FALSE){
exposure_vec = c(exposure_vec, key)
expo_gnam = expo_gnam + as.integer(rev_table$dir_gnam[row])*round(rev_table$unit_gnam[row],1)*round(rev_table$cf_gnam[row],2)
rev_table$expo_dollar_gnam[row] = expo_gnam
expo_aua = expo_aua + as.integer(rev_table$dir_aua[row])*round(rev_table$unit_aua[row],1)*round(rev_table$cf_aua[row],2)
rev_table$expo_dollar_aua[row] = round(expo_aua,2)
} else if (is.element(key, exposure_vec)){
#find index of the first match of said key
ind = which(rev_table$key==key)[1]
expo_gnam = expo_gnam - as.integer(rev_table$dir_gnam[ind])*round(rev_table$unit_gnam[ind],1)*round(rev_table$cf_gnam[ind],2)
rev_table$expo_dollar_gnam[row] = expo_gnam
expo_aua = expo_aua - as.integer(rev_table$dir_aua[ind])*round(rev_table$unit_aua[ind],1)*round(rev_table$cf_aua[ind],2)
rev_table$expo_dollar_aua[row] = round(expo_aua,2)
}
}
exposure_vec <- c()
expo_gnam = 0
expo_aua = 0
for (row in 1:nrow(rev_table)){
key = rev_table$key[row]
if (is.element(key, exposure_vec)==FALSE){
exposure_vec = c(exposure_vec, key)
expo_gnam = expo_gnam + as.integer(rev_table$dir_gnam[row])*rev_table$unit_gnam[row]*rev_table$cf_gnam[row]
rev_table$expo_dollar_gnam[row] = round(expo_gnam,2)
expo_aua = expo_aua + as.integer(rev_table$dir_aua[row])*rev_table$unit_aua[row]*rev_table$cf_aua[row]
rev_table$expo_dollar_aua[row] = round(expo_aua,2)
} else if (is.element(key, exposure_vec)){
#find index of the first match of said key
ind = which(rev_table$key==key)[1]
expo_gnam = expo_gnam - as.integer(rev_table$dir_gnam[ind])*rev_table$unit_gnam[ind]*rev_table$cf_gnam[ind]
rev_table$expo_dollar_gnam[row] = round(expo_gnam,2)
expo_aua = expo_aua - as.integer(rev_table$dir_aua[ind])*rev_table$unit_aua[ind]*rev_table$cf_aua[ind]
rev_table$expo_dollar_aua[row] = round(expo_aua,2)
}
}
exposure_vec <- c()
expo_gnam = 0
expo_aua = 0
for (row in 1:nrow(rev_table)){
key = rev_table$key[row]
if (is.element(key, exposure_vec)==FALSE){
exposure_vec = c(exposure_vec, key)
expo_gnam = expo_gnam + as.integer(rev_table$dir_gnam[row])*rev_table$unit_gnam[row]*rev_table$cf_gnam[row]
rev_table$expo_dollar_gnam[row] = round(expo_gnam,3)
expo_aua = expo_aua + as.integer(rev_table$dir_aua[row])*rev_table$unit_aua[row]*rev_table$cf_aua[row]
rev_table$expo_dollar_aua[row] = round(expo_aua,2)
} else if (is.element(key, exposure_vec)){
#find index of the first match of said key
ind = which(rev_table$key==key)[1]
expo_gnam = expo_gnam - as.integer(rev_table$dir_gnam[ind])*rev_table$unit_gnam[ind]*rev_table$cf_gnam[ind]
rev_table$expo_dollar_gnam[row] = round(expo_gnam,3)
expo_aua = expo_aua - as.integer(rev_table$dir_aua[ind])*rev_table$unit_aua[ind]*rev_table$cf_aua[ind]
rev_table$expo_dollar_aua[row] = round(expo_aua,2)
}
}
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
knitr::opts_chunk$set(echo = TRUE)
### Loading packages ###
setwd("~/Dropbox/Gold")
library(ggplot2)
library(scales)
library(grid)
library(RColorBrewer)
library(ramify)
library(dplyr)
### global variables ###
ma.window = 60
library(dplyr)
install.packages(dplyr)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
knitr::opts_chunk$set(echo = TRUE)
### Loading packages ###
setwd("~/Dropbox/Gold")
library(ggplot2)
library(scales)
library(grid)
library(RColorBrewer)
library(ramify)
library(dplyr)
x = data.frame(a = 1, b = 2)
x
x  = x %>% mutate(c = a+b)
require(dplyr)
x  = x %>% mutate(c = a+b)
library(dplyr)
installed.packages("dplyr")
library(dplyr)
install.packages("Rcpp",  dependencies = TRUE, repos = "http://cran.us.r-project.org")
install.packages("Rcpp", dependencies = TRUE, repos = "http://cran.us.r-project.org")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
x  = x %>% mutate(c = a+b)
x = data.frame(a = 1, b = 2)
x  = x %>% mutate(c = a+b)
x
knitr::opts_chunk$set(echo = TRUE)
### Loading packages ###
setwd("~/Dropbox/Gold")
library(ggplot2)
library(scales)
library(grid)
library(RColorBrewer)
library(ramify)
library(dplyr)
ma.window = 60
### Loading data ###
#this data is the price of gold in usd per oz
data = read.csv('std_daily.csv')
data$date = as.Date(data$date)
data$diff_aua6_goldlnam = data$aua6 - data$goldlnam
data$diff_aua6_goldnam_ma <- NA
data$diff_aua6_goldnam_sd <- NA
for (i in (ma.window+1):nrow(data)){
data$diff_aua6_goldnam_ma[i] = mean(data$diff_aua6_goldlnam[(i-ma.window):i],na.rm=TRUE)
}
for (i in (ma.window+1):nrow(data)){
data$diff_aua6_goldnam_sd[i] = sd(data$diff_aua6_goldlnam[(i-ma.window):i],na.rm=TRUE)
}
data$diff_aua6_goldlnpm = data$aua6 - data$goldlnpm
data$diff_shg_aua6 = data$shg - data$aua6
data$diff_shg_goldlnam = data$shg - data$goldlnam
data$diff_shg_goldlnpm = data$shg - data$goldlnpm
### Create yearly data sets ###
d2014 = data[format(data$date, '%Y') == '2014',]
d2015 = data[format(data$date, '%Y') == '2015',]
d2016 = data[format(data$date, '%Y') == '2016',]
d2017 = data[format(data$date, '%Y') == '2017',]
### Plot yearly differences between aua6 and goldlnam ###
#diff_aua6_goldlnam_2014 = ggplot()+geom_line(aes(y = diff_aua6_goldlnam, x = date), data = d2014)
diff_aua6_goldlnam_2015 = ggplot()+geom_line(aes(y = diff_aua6_goldlnam, x = date), data = d2015)
diff_aua6_goldlnam_2016 = ggplot()+geom_line(aes(y = diff_aua6_goldlnam, x = date), data = d2016)
diff_aua6_goldlnam_2017 = ggplot()+geom_line(aes(y = diff_aua6_goldlnam, x = date), data = d2017)
### Plot yearly differences between aua6 and goldlnpm ###
diff_aua6_goldlnpm_2014 = ggplot()+geom_line(aes(y = diff_aua6_goldlnpm, x = date), data = d2014)
diff_aua6_goldlnpm_2015 = ggplot()+geom_line(aes(y = diff_aua6_goldlnpm, x = date), data = d2015)
diff_aua6_goldlnpm_2016 = ggplot()+geom_line(aes(y = diff_aua6_goldlnpm, x = date), data = d2016)
diff_aua6_goldlnpm_2017 = ggplot()+geom_line(aes(y = diff_aua6_goldlnpm, x = date), data = d2017)
#plot yearly differences between shg and aua6
diff_shg_aua6_2014 = ggplot()+geom_line(aes(y = diff_shg_aua6, x = date), data = d2014)
diff_shg_aua6_2015 = ggplot()+geom_line(aes(y = diff_shg_aua6, x = date), data = d2015)
diff_shg_aua6_2016 = ggplot()+geom_line(aes(y = diff_shg_aua6, x = date), data = d2016)
diff_shg_aua6_2017 = ggplot()+geom_line(aes(y = diff_shg_aua6, x = date), data = d2017)
#plot yearly differences between shg and goldlnam
diff_shg_goldlnam_2008 = ggplot()+geom_line(aes(y = diff_shg_goldlnam, x = date), data = d2008)
#plot yearly differences between shg and goldlnam
diff_shg_goldlnam_2014 = ggplot()+geom_line(aes(y = diff_shg_goldlnam, x = date), data = d2014)
diff_shg_goldlnam_2015 = ggplot()+geom_line(aes(y = diff_shg_goldlnam, x = date), data = d2015)
diff_shg_goldlnam_2016 = ggplot()+geom_line(aes(y = diff_shg_goldlnam, x = date), data = d2016)
diff_shg_goldlnam_2017 = ggplot()+geom_line(aes(y = diff_shg_goldlnam, x = date), data = d2017)
ma.window = 60
plottot = ggplot(data=data, aes(x=date))+
geom_line(aes(y = goldlnam, color="goldlnam"))+
#geom_line(aes(y=goldlnpm, color="goldlnpm"))+
geom_line(aes(y=aua6, color="aua6"))+
labs(color="key")+
ylab("price usd/oz")+
ggtitle("Gold Prices Historic")
plottot
ggplot(data=data, aes(x=date))+geom_line(aes(y=data$diff_aua6_goldlnam))
x = 1
View(d2008)
rm(list=ls())
#!/usr/local/bin/Rscript
#setwd("~/Documents/GitHub/covid19-Rcode/")
library(data.table)
library(dplyr)
library(tidyr)
# read in data
intl_confirmed = fread("data/time_series_covid19_confirmed_global.csv", stringsAsFactors = F)
intl_confirmed = intl_confirmed %>% select(-Lat, -Long)
intl_confirmed = gather(intl_confirmed, Date, Num_Confirmed, 3:ncol(intl_confirmed), factor_key=TRUE)
colnames(intl_confirmed) = c("State", "Country", "Date", "Num_Confirmed")
us_confirmed = fread("data/time_series_covid19_confirmed_US.csv", stringsAsFactors = F)
us_confirmed = us_confirmed %>% select(-UID, -iso2, -iso3, -code3, -FIPS, -Admin2, -Combined_Key, -Lat, -Long_)
us_confirmed = gather(us_confirmed, Date, Num_Confirmed, 3:ncol(us_confirmed), factor_key=TRUE)
colnames(us_confirmed) = c("State", "Country", "Date", "Num_Confirmed")
us_confirmed = us_confirmed %>% group_by(State, Country, Date) %>% summarise(Num_Confirmed = sum(Num_Confirmed)) %>% ungroup()
# combine data and clean a little
confirmed = rbind(intl_confirmed %>% filter(Country != "US"), us_confirmed)
confirmed = confirmed %>% mutate(Date = as.Date(Date, format = "%m/%d/%y"))
# remap hong kong and rename US
confirmed = confirmed %>%
mutate(Country = ifelse(State == "Hong Kong", "Hong Kong", Country),
Country = ifelse(Country == "US", "United States", Country))
#!/usr/local/bin/Rscript
#setwd("~/Documents/GitHub/covid19-Rcode/")
library(data.table)
library(dplyr)
library(tidyr)
# read in data
intl_confirmed = fread("data/time_series_covid19_confirmed_global.csv", stringsAsFactors = F)
intl_confirmed = intl_confirmed %>% select(-Lat, -Long)
intl_confirmed = gather(intl_confirmed, Date, Num_Confirmed, 3:ncol(intl_confirmed), factor_key=TRUE)
colnames(intl_confirmed) = c("State", "Country", "Date", "Num_Confirmed")
us_confirmed = fread("data/time_series_covid19_confirmed_US.csv", stringsAsFactors = F)
us_confirmed = us_confirmed %>% select(-UID, -iso2, -iso3, -code3, -FIPS, -Admin2, -Combined_Key, -Lat, -Long_)
us_confirmed = gather(us_confirmed, Date, Num_Confirmed, 3:ncol(us_confirmed), factor_key=TRUE)
colnames(us_confirmed) = c("State", "Country", "Date", "Num_Confirmed")
us_confirmed = us_confirmed %>% group_by(State, Country, Date) %>% summarise(Num_Confirmed = sum(Num_Confirmed)) %>% ungroup()
# combine data and clean a little
confirmed = rbind(intl_confirmed %>% filter(Country != "US"), us_confirmed)
confirmed = confirmed %>% mutate(Date = as.Date(Date, format = "%m/%d/%y"))
# remap hong kong and rename US
confirmed = confirmed %>%
mutate(Country = ifelse(State == "Hong Kong", "Hong Kong", Country),
Country = ifelse(Country == "US", "United States", Country))
fwrite(confirmed, '../covid19-Django/trends/data/confirmed_cases.csv')
# read in data
intl_confirmed = fread("data/time_series_covid19_confirmed_global.csv", stringsAsFactors = F)
intl_confirmed = intl_confirmed %>% select(-Lat, -Long)
intl_confirmed = gather(intl_confirmed, Date, Num_Confirmed, 3:ncol(intl_confirmed), factor_key=TRUE)
#!/usr/local/bin/Rscript
setwd("~/Documents/GitHub/covid19-Rcode/")
library(data.table)
library(dplyr)
library(tidyr)
# read in data
intl_confirmed = fread("data/time_series_covid19_confirmed_global.csv", stringsAsFactors = F)
intl_confirmed = intl_confirmed %>% select(-Lat, -Long)
intl_confirmed = gather(intl_confirmed, Date, Num_Confirmed, 3:ncol(intl_confirmed), factor_key=TRUE)
colnames(intl_confirmed) = c("State", "Country", "Date", "Num_Confirmed")
us_confirmed = fread("data/time_series_covid19_confirmed_US.csv", stringsAsFactors = F)
us_confirmed = us_confirmed %>% select(-UID, -iso2, -iso3, -code3, -FIPS, -Admin2, -Combined_Key, -Lat, -Long_)
us_confirmed = gather(us_confirmed, Date, Num_Confirmed, 3:ncol(us_confirmed), factor_key=TRUE)
colnames(us_confirmed) = c("State", "Country", "Date", "Num_Confirmed")
us_confirmed = us_confirmed %>% group_by(State, Country, Date) %>% summarise(Num_Confirmed = sum(Num_Confirmed)) %>% ungroup()
# combine data and clean a little
confirmed = rbind(intl_confirmed %>% filter(Country != "US"), us_confirmed)
confirmed = confirmed %>% mutate(Date = as.Date(Date, format = "%m/%d/%y"))
# remap hong kong and rename US
confirmed = confirmed %>%
mutate(Country = ifelse(State == "Hong Kong", "Hong Kong", Country),
Country = ifelse(Country == "US", "United States", Country))
fwrite(confirmed, '../covid19-Django/trends/data/confirmed_cases.csv')
View(confirmed)
x = confirmed %>% group_by(Country) %>% summarise(Num_States = n_distinct(State))
View(x)
x = confirmed %>% group_by(Country) %>% summarise(Num_States = n_distinct(State)) %>% ungroup()
x = x %>% filter(Num_States > 1)
y = confirmed %>% filter(Country %in% x$Country)
sort(unique(y$State))
z = y %>% filter(State == "" | is.na(State))
View(z)
denmark = confirmed %>% filter(Country == "Denmark")
View(denmark)
x
denmark = confirmed %>% filter(Country == "Australia")
denmark = confirmed %>% filter(Country == "Canada")
denmark = confirmed %>% filter(Country == "France")
denmark = confirmed %>% filter(Country == "Netherlands")
denmark = confirmed %>% filter(Country == "United Kingdom")
x = confirmed %>% filter(Country %in% c('Australia', "Canada", "China", 'United States'))
sort(unique(x$State))
z = y %>% filter(State == "" | is.na(State))
View(z)
z = x %>% filter(State == "" | is.na(State))
#!/usr/local/bin/Rscript
setwd("~/Documents/GitHub/covid19-Rcode/")
library(data.table)
library(dplyr)
library(tidyr)
intl_deaths = fread("data/time_series_covid19_deaths_global.csv", stringsAsFactors = F)
#!/usr/local/bin/Rscript
setwd("~/Documents/GitHub/covid19-Rcode/")
library(data.table)
library(dplyr)
library(tidyr)
nrow(intl_deaths)
colnames(intl_deaths)
intl_deaths = fread("data/time_series_covid19_deaths_global.csv", stringsAsFactors = F)
intl_deaths = intl_deaths %>% select(-Lat, -Long)
intl_deaths = gather(intl_deaths, Date, Num_Confirmed, 3:ncol(intl_deaths), factor_key=TRUE)
colnames(intl_deaths) = c("State", "Country", "Date", "Num_Deaths")
View(intl_deaths)
us_deaths = fread("data/time_series_covid19_deaths_US.csv", stringsAsFactors = F)
us_deaths = us_deaths %>% select(-UID, -iso2, -iso3, -code3, -FIPS, -Admin2, -Combined_Key, -Lat, -Long_)
us_deaths = gather(us_deaths, Date, Num_Deaths, 3:ncol(us_deaths), factor_key=TRUE)
colnames(us_deaths) = c("State", "Country", "Date", "Num_Deaths")
us_deaths = us_deaths %>% group_by(State, Country, Date) %>% summarise(Num_Deaths = sum(Num_Deaths)) %>% ungroup()
head(us_deaths)
x = us_deaths %>% filter(Date == "Population")
View(x)
x = global_deaths %>% filter(Date == "Population")
x = intl_deaths %>% filter(Date == "Population")
sort(distinct(intl_deaths$Date))
sort(unique(intl_deaths$Date))
sort(unique(us_deaths$Date))
# combine data and clean a little
confirmed = rbind(intl_confirmed %>% filter(Country != "US"), us_confirmed)
sort(unique(intl_deaths$Country))
sort(unique(us_deaths$Country))
rm(list=ls())
#!/usr/local/bin/Rscript
setwd("~/Documents/GitHub/covid19-Rcode/")
library(data.table)
library(dplyr)
library(tidyr)
# read in data
intl_confirmed = fread("data/time_series_covid19_confirmed_global.csv", stringsAsFactors = F)
intl_confirmed = intl_confirmed %>% select(-Lat, -Long)
intl_confirmed = gather(intl_confirmed, Date, Num_Confirmed, 3:ncol(intl_confirmed), factor_key=TRUE)
colnames(intl_confirmed) = c("State", "Country", "Date", "Num_Confirmed")
intl_deaths = fread("data/time_series_covid19_deaths_global.csv", stringsAsFactors = F)
intl_deaths = intl_deaths %>% select(-Lat, -Long)
intl_deaths = gather(intl_deaths, Date, Num_Deaths, 3:ncol(intl_deaths), factor_key=TRUE)
colnames(intl_deaths) = c("State", "Country", "Date", "Num_Deaths")
us_confirmed = fread("data/time_series_covid19_confirmed_US.csv", stringsAsFactors = F)
us_confirmed = us_confirmed %>% select(-UID, -iso2, -iso3, -code3, -FIPS, -Admin2, -Combined_Key, -Lat, -Long_)
us_confirmed = gather(us_confirmed, Date, Num_Confirmed, 3:ncol(us_confirmed), factor_key=TRUE)
colnames(us_confirmed) = c("State", "Country", "Date", "Num_Confirmed")
us_confirmed = us_confirmed %>% group_by(State, Country, Date) %>% summarise(Num_Confirmed = sum(Num_Confirmed)) %>% ungroup()
us_deaths = fread("data/time_series_covid19_deaths_US.csv", stringsAsFactors = F)
us_deaths = us_deaths %>% select(-UID, -iso2, -iso3, -code3, -FIPS, -Admin2, -Combined_Key, -Lat, -Long_)
us_deaths = gather(us_deaths, Date, Num_Deaths, 3:ncol(us_deaths), factor_key=TRUE)
colnames(us_deaths) = c("State", "Country", "Date", "Num_Deaths")
us_deaths = us_deaths %>% group_by(State, Country, Date) %>% summarise(Num_Deaths = sum(Num_Deaths)) %>% ungroup() %>% filter(Date == "Population")
# combine data and clean a little
confirmed = rbind(intl_confirmed %>% filter(Country != "US"), us_confirmed)
deaths = rbind(intl_deaths %>% filter(Country != "US"), us_deaths)
confirmed = confirmed %>% mutate(Date = as.Date(Date, format = "%m/%d/%y"))
deaths = deaths %>% mutate(Date = as.Date(Date, format = "%m/%d/%y"))
# remap hong kong and rename US
confirmed = confirmed %>%
mutate(Country = ifelse(State == "Hong Kong", "Hong Kong", Country),
Country = ifelse(Country == "Taiwan*", "Taiwan", Country),
Country = ifelse(Country == "US", "United States", Country))
deaths = deaths %>%
mutate(Country = ifelse(State == "Hong Kong", "Hong Kong", Country),
Country = ifelse(Country == "Taiwan*", "Taiwan", Country),
Country = ifelse(Country == "US", "United States", Country))
fwrite(confirmed, '../covid19-Django/trends/data/confirmed_cases.csv')
fwrite(deaths, '../covid19-Django/trends/data/num_deaths.csv')
View(deaths)
View(us_deaths)
#!/usr/local/bin/Rscript
setwd("~/Documents/GitHub/covid19-Rcode/")
library(data.table)
library(dplyr)
library(tidyr)
# read in data
intl_confirmed = fread("data/time_series_covid19_confirmed_global.csv", stringsAsFactors = F)
intl_confirmed = intl_confirmed %>% select(-Lat, -Long)
intl_confirmed = gather(intl_confirmed, Date, Num_Confirmed, 3:ncol(intl_confirmed), factor_key=TRUE)
colnames(intl_confirmed) = c("State", "Country", "Date", "Num_Confirmed")
intl_deaths = fread("data/time_series_covid19_deaths_global.csv", stringsAsFactors = F)
intl_deaths = intl_deaths %>% select(-Lat, -Long)
intl_deaths = gather(intl_deaths, Date, Num_Deaths, 3:ncol(intl_deaths), factor_key=TRUE)
colnames(intl_deaths) = c("State", "Country", "Date", "Num_Deaths")
us_confirmed = fread("data/time_series_covid19_confirmed_US.csv", stringsAsFactors = F)
us_confirmed = us_confirmed %>% select(-UID, -iso2, -iso3, -code3, -FIPS, -Admin2, -Combined_Key, -Lat, -Long_)
us_confirmed = gather(us_confirmed, Date, Num_Confirmed, 3:ncol(us_confirmed), factor_key=TRUE)
colnames(us_confirmed) = c("State", "Country", "Date", "Num_Confirmed")
us_confirmed = us_confirmed %>% group_by(State, Country, Date) %>% summarise(Num_Confirmed = sum(Num_Confirmed)) %>% ungroup()
us_deaths = fread("data/time_series_covid19_deaths_US.csv", stringsAsFactors = F)
us_deaths = us_deaths %>% select(-UID, -iso2, -iso3, -code3, -FIPS, -Admin2, -Combined_Key, -Lat, -Long_)
us_deaths = gather(us_deaths, Date, Num_Deaths, 3:ncol(us_deaths), factor_key=TRUE)
colnames(us_deaths) = c("State", "Country", "Date", "Num_Deaths")
us_deaths = us_deaths %>% group_by(State, Country, Date) %>% summarise(Num_Deaths = sum(Num_Deaths)) %>% ungroup() %>% filter(Date != "Population")
# combine data and clean a little
confirmed = rbind(intl_confirmed %>% filter(Country != "US"), us_confirmed)
deaths = rbind(intl_deaths %>% filter(Country != "US"), us_deaths)
confirmed = confirmed %>% mutate(Date = as.Date(Date, format = "%m/%d/%y"))
deaths = deaths %>% mutate(Date = as.Date(Date, format = "%m/%d/%y"))
# remap hong kong and rename US
confirmed = confirmed %>%
mutate(Country = ifelse(State == "Hong Kong", "Hong Kong", Country),
Country = ifelse(Country == "Taiwan*", "Taiwan", Country),
Country = ifelse(Country == "US", "United States", Country))
deaths = deaths %>%
mutate(Country = ifelse(State == "Hong Kong", "Hong Kong", Country),
Country = ifelse(Country == "Taiwan*", "Taiwan", Country),
Country = ifelse(Country == "US", "United States", Country))
fwrite(confirmed, '../covid19-Django/trends/data/confirmed_cases.csv')
fwrite(deaths, '../covid19-Django/trends/data/num_deaths.csv')
#!/usr/local/bin/Rscript
setwd("~/Documents/GitHub/covid19-Rcode/")
library(data.table)
library(dplyr)
library(tidyr)
# read in data
intl_confirmed = fread("data/time_series_covid19_confirmed_global.csv", stringsAsFactors = F)
intl_confirmed = intl_confirmed %>% select(-Lat, -Long)
intl_confirmed = gather(intl_confirmed, Date, Num_Confirmed, 3:ncol(intl_confirmed), factor_key=TRUE)
colnames(intl_confirmed) = c("State", "Country", "Date", "Num_Confirmed")
intl_deaths = fread("data/time_series_covid19_deaths_global.csv", stringsAsFactors = F)
intl_deaths = intl_deaths %>% select(-Lat, -Long)
intl_deaths = gather(intl_deaths, Date, Num_Deaths, 3:ncol(intl_deaths), factor_key=TRUE)
colnames(intl_deaths) = c("State", "Country", "Date", "Num_Deaths")
View(intl_deaths)
x = fread("../covid19-Django/trends/data/num_deaths.csv")
View(x)
setwd("~/Documents/GitHub/covid19-Rcode/")
library(data.table)
library(dplyr)
library(tidyr)
# read in data
intl_confirmed = fread("data/time_series_covid19_confirmed_global.csv", stringsAsFactors = F)
intl_confirmed = intl_confirmed %>% select(-Lat, -Long)
intl_confirmed = gather(intl_confirmed, Date, Num_Confirmed, 3:ncol(intl_confirmed), factor_key=TRUE)
colnames(intl_confirmed) = c("State", "Country", "Date", "Num_Confirmed")
intl_deaths = fread("data/time_series_covid19_deaths_global.csv", stringsAsFactors = F)
intl_deaths = intl_deaths %>% select(-Lat, -Long)
intl_deaths = gather(intl_deaths, Date, Num_Deaths, 3:ncol(intl_deaths), factor_key=TRUE)
colnames(intl_deaths) = c("State", "Country", "Date", "Num_Deaths")
us_confirmed = fread("data/time_series_covid19_confirmed_US.csv", stringsAsFactors = F)
us_confirmed = us_confirmed %>% select(-UID, -iso2, -iso3, -code3, -FIPS, -Admin2, -Combined_Key, -Lat, -Long_)
us_confirmed = gather(us_confirmed, Date, Num_Confirmed, 3:ncol(us_confirmed), factor_key=TRUE)
colnames(us_confirmed) = c("State", "Country", "Date", "Num_Confirmed")
us_confirmed = us_confirmed %>% group_by(State, Country, Date) %>% summarise(Num_Confirmed = sum(Num_Confirmed)) %>% ungroup()
us_deaths = fread("data/time_series_covid19_deaths_US.csv", stringsAsFactors = F)
us_deaths = us_deaths %>% select(-UID, -iso2, -iso3, -code3, -FIPS, -Admin2, -Combined_Key, -Lat, -Long_)
us_deaths = gather(us_deaths, Date, Num_Deaths, 3:ncol(us_deaths), factor_key=TRUE)
colnames(us_deaths) = c("State", "Country", "Date", "Num_Deaths")
us_deaths = us_deaths %>% group_by(State, Country, Date) %>% summarise(Num_Deaths = sum(Num_Deaths)) %>% ungroup() %>% filter(Date != "Population")
# combine data and clean a little
confirmed = rbind(intl_confirmed %>% filter(Country != "US"), us_confirmed)
deaths = rbind(intl_deaths %>% filter(Country != "US"), us_deaths)
confirmed = confirmed %>% mutate(Date = as.Date(Date, format = "%m/%d/%y"))
deaths = deaths %>% mutate(Date = as.Date(Date, format = "%m/%d/%y"))
# remap hong kong and rename US
confirmed = confirmed %>%
mutate(Country = ifelse(State == "Hong Kong", "Hong Kong", Country),
Country = ifelse(Country == "Taiwan*", "Taiwan", Country),
Country = ifelse(Country == "US", "United States", Country))
deaths = deaths %>%
mutate(Country = ifelse(State == "Hong Kong", "Hong Kong", Country),
Country = ifelse(Country == "Taiwan*", "Taiwan", Country),
Country = ifelse(Country == "US", "United States", Country))
View(confirmed)
confirmed = confirmed %>% mutate(Lag_Num = lag(Num_Confirmed))
